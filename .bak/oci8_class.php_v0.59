<?php
/**
 * Oracle Database Class.
 *
 * Database Class provides a consistent API to communicate with MySQL or Oracle Databases.
 * This one implements the OCI8 API.
 * Requires dbdefs.inc.php for global access data (user,pw,host,appname)
 *
 * - Connect() / Disconnect()
 * - Print_Error() / GetErrorText()
 * - Query() / QueryResult() / FetchResult() / FreeResult()
 * - Version() / GetClassVersion() / GetQueryCount()
 * - Commit() / Rollback()
 * - SetDebug() / PrintDebug() / SQLDebug()
 * - GetBindVars() - PRIVATE!
 * - DescTable()
 * - Prepare() / Execute()
 * - SearchQueryCache() / RemoveFromQueryCache()
 * - checkSock()
 * - GetConnectionHandle() / SetConnectionHandle()
 * - QueryHash() / QueryResultHash()
 * - AffectedRows()
 * - setErrorDisplay() / getSQLError()
 * - setPrefetch()
 * @package db_oci8
 * @author Sascha 'SieGeL' Pfalz <php@saschapfalz.de>
 * @version 0.62 (18-Aug-2005)
 * $Id: oci8_class.php,v 1.7 2005/08/18 21:19:01 siegel Exp $
 * @license http://opensource.org/licenses/bsd-license.php BSD License
 */
/**
 * DEBUG: No Debug Info
 */
define('DBOF_DEBUGOFF'    , (1 << 0));
/**
 * DEBUG: Debug on-screen
 */
define('DBOF_DEBUGSCREEN' , (1 << 1));
/**
 * DEBUG: Debug to error_log()
 */
define('DBOF_DEBUGFILE'   , (1 << 2));

/**#@+
 * These defines are used in DescTable()
 * @see DescTable
 */
define('DBOF_COLNAME', 0);
define('DBOF_COLTYPE', 1);
define('DBOF_COLSIZE', 2);
define('DBOF_COLPREC', 3);
/**#@-*/

/**#@+
 * Used for Query Cache (V0.38+)
 */
define('DBOF_CACHE_QUERY'     , 0);
define('DBOF_CACHE_STATEMENT' , 1);
/**#@-*/

/**#@+
 * Connect and error handling (V0.57+).
 * If NO_ERRORS is set and an error occures, the class still reports an
 * an error of course but the error shown is reduced to avoid showing
 * sensible informations in a productive environment.
 * Set RETURN_ALL_ERRORS if you want to handle errors yourself.
 */
define('DBOF_SHOW_NO_ERRORS'    , 0);
define('DBOF_SHOW_ALL_ERRORS'   , 1);
define('DBOF_RETURN_ALL_ERRORS' , 2);
/**#@-*/

/**
 * OCI8 Database Class.
 * @package db_oci8
 */
class db_oci8
  {
  /** @var mixed $sock Internal connection handle. */
  var $sock;
  /** @var string $host The TNS name of the target database. */
  var $host;
  /** @var string $user The username used to connect to database. */
  var $user;
  /** @var string $user The password used to connect to database. */
  var $password;
  /** @var string $database Currently not in use. */
  var $database;
  /** @var integer $querycounter Counts amount of queries executed. */
  var $querycounter;
  /** @var mixed $stmt Stores active statement handle. */
  var $stmt;
  /** @var string $appname Name of application that uses this class. */
  var $appname;
  /** @var integer $debug Debugstate, default is OFF. */
  var $debug;
  /** @var string $sqlerr Contains possible SQL query that failed. */
  var $sqlerr;
  /** @var string $sqlerrmsg Contains ocierror['message'] info in case of an error. */
  var $sqlerrmsg;
  /** @var array $sqlcache Internal Cache for Prepare()/Execute() calls. */
  var $sqlcache;
  /** @var string All passed variables except QUERY and Flags. */
  var $errvars;
  /** @var integer Set to 1 to not auto-exit on error (Default is 0) */
  var $no_exit;
  /** @var integer How many SQL queries have been executed */
  var $sqlcount;
  /** @var integer How many Rows where affected by previous DML operation */
  var $AffectedRows;
  /** @var integer Flag indates level of error information shown */
  var $showError;
  /** @var string Email Address for the administrator of this project */
  var $AdminEmail;

  /**
   * Class Constructor.
   * Whenever you instantiate this class the file dbdefs.inc.php will be included automatically.
   * This file contains the default login data and other configuration options, see description
   * inside this file for further informations.
   * @see dbdefs.inc.php
   */
  function db_oci8()
    {
    include_once('dbdefs.inc.php');
    $this->classversion = '0.62';                   // Version of our class
    $this->host         = '';                       // TNS Name of DB to connect to
    $this->user         = '';                       // Username
    $this->pass         = '';                       // Password
    $this->appname      = OCIAPPNAME;               // Name of our Application
    $this->database     = '';                       // Oracle does not use this
    $this->sock         = 0;                        // Internal database handle
    $this->querycounter = 0;                        // How many queries where executed
    $this->stmt         = 0;                        // Oracle Statement handler
    $this->debug        = 0;                        // Debug is off per default
    $this->sqlcache     = array();                  // Internal SQL cache for Prepare()/Execute()
    $this->sqlerr       = '';                       // Contains possible SQL query that failed
    $this->sqlerrmsg    = '';                       // Contains ocierror['message'] info
    $this->errvars      = array();                  // All passed variables except QUERY and Flags
    $this->no_exit      = 0;                        // Flag for Prepare/Execute pair to indicate if we should exit
    $this->sqlcount     = 0;                        // Counter for Prepare/Execute pair to reference correct query
    $this->AffectedRows = 0;                        // Amount of rows processed during statement execution
    $this->showError    = 0;                        // Flag for Error processing.
    $this->AdminEmail   = $_SERVER['SERVER_ADMIN']; // Defaults to Webadministrator of Server
    if(!defined('OCIAPPNAME'))
      {
      $this->setErrorHandling(DBOF_SHOW_ALL_ERRORS);
      $this->Print_Error('dbdefs.inc.php not found/wrong configured! Please check Class installation!');
      }
    if(defined('DB_ERRORMODE'))                     // You can set a default behavour for error handling in debdefs.inc.php
      {
      $this->setErrorHandling(DB_ERRORMODE);
      }
    else
      {
      $this->setErrorHandling(DBOF_SHOW_NO_ERRORS); // Default is not to show too much informations
      }
    if(defined('OCIDB_ADMINEMAIL'))
      {
      $this->AdminEmail = OCIDB_ADMINEMAIL;         // If set use this address instead of default webmaster
      }
    }

  /**
   * Performs the connection to Oracle.
   * If anything goes wrong calls Print_Error().
   * Also an Oracle procedure is called to register the Application name as defined
   * in dbdefs.inc.php, This helps DBAs to better fine tune their databases according
   * to application needs.
   * @see dbdefs.inc.php
   * @see Print_Error()
   * @param string $user Username used to connect to DB
   * @param string $pass Password to use for given username
   * @param string $host Hostname of database to connect to
   * @return mixed Either the DB connection handle or an error array/exit, depending how $exit_on_error is set
   * @see oci_logon
   */

  function Connect($user=NULL,$pass=NULL,$host=NULL,$exit_on_error = 1)
    {
    $connquery = "";
    if($this->sock) return($this->sock);
    if(isset($user) && $user!=NULL) $this->user = $user;
    else $this->user = OCIDB_USER;
    if(isset($pass) && $pass!=NULL) $this->pass = $pass;
    else $this->pass = OCIDB_PASS;
    if(isset($host) && $host!=NULL) $this->host = $host;
    else $this->host = OCIDB_HOST;
    $this->printDebug('OCILogon('.sprintf("%s/%s@%s",$this->user,$this->pass,$this->host).')');
    $this->sock = @OCILogon($this->user,$this->pass,$this->host);
    if(!$this->sock)
      {
      $this->Print_Error('Connection to "'.$this->host.'" failed!',NULL,$exit_on_error);
      return(0);
      }
    if(defined('DB_REGISTER') && DB_REGISTER == 1)
      {
      $connquery.= " DBMS_APPLICATION_INFO.SET_MODULE('".$this->appname."',NULL); ";
      }
    if(defined('DB_SET_NUMERIC') && DB_SET_NUMERIC == 1)
      {
      if(!defined('DB_NUM_DECIMAL') || !defined('DB_NUM_GROUPING'))
        {
        $this->Disconnect();
        $this->setErrorHandling(DBOF_SHOW_ALL_ERRORS);
        $this->Print_Error('You have to define DB_NUM_DECIMAL/DB_NUM_GROUPING in dbdefs.inc.php first !!!');
        exit;
        }
      $connquery.= " EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_NUMERIC_CHARACTERS = ''".DB_NUM_DECIMAL.DB_NUM_GROUPING."'''; ";
      }
    if($connquery != "")
      {
      $dummy = "BEGIN ";
      $dummy.= $connquery;
      $dummy.= " END;";
      $this->Query($dummy,OCI_ASSOC,0);
      }
    return($this->sock);
    }

  /**
   * Disconnects from Oracle.
   * You may optionally pass an external link identifier
   * @param mixed $other_sock Optionally your own connection handle to close,
   * else internal socket will be used.
   * @see OCI_Logoff
   */

  function Disconnect($other_sock=-1)
    {
    if($other_sock!=-1)
      {
      @OCILogoff($other_sock);
      }
    else
      {
      if($this->sock)
        {
        @OCILogoff($this->sock);
        $this->sock = 0;
        }
      }
    $this->AffectedRows = 0;
    $this->sqlerr       = 0;
    $this->sqlerrmsg    = '';
    }

  /**
   * Prints out an Oracle error.
   * Tries to highlight the buggy SQL part of the query and dumps out
   * as much informations as possible. This may lead however to
   * security problems, in this case you can set DBOF_SHOW_NO_ERRORS
   * and the Error informations are returned to the callee instead of
   * being displayed on-screen.
   * @param string $ustr Optional user-error string to be displayed
   * @param mixed $var2dump Optional a variable to be dumped out via print_r()
   * @param integer $exit_on_error If set to default of 1 this function terminates
   * execution of the script by calling exit, else it simply returns.
   * @see print_r
   * @see oci_error
   */
  function Print_Error($ustr='',$var2dump=NULL,$exit_on_error = 1)
    {
    if($this->stmt)
      {
      $earr = @OCIError($this->stmt);
      }
    elseif($this->sock)
      {
      $earr = @OCIError($this->sock);
      }
    else
      {
      $earr = @OCIError();
      }
    $errstr   = $earr['message'];
    $errnum   = $earr['code'];
    $sqltext  = $earr['sqltext'];
    $sqlerrpos= intval($earr['offset']);
    if($errnum == '')
      {
      $errnum = -1;
      }
    if($errstr == '')
      {
      $errstr = 'N/A';
      }
    $this->sqlerrmsg = $errstr;
    if($this->showError == DBOF_RETURN_ALL_ERRORS)
      {
      return($errnum);      // Return the error number
      }
    if($sqltext=="")
      {
      if($this->sqlerr!='') $sqltext = $this->sqlerr;
      else $sqltext = 'N/A';
      }
    $filename = basename($_SERVER['SCRIPT_FILENAME']);
    if($this->sock)
      {
      $this->Rollback();
      $this->Disconnect();
      }
    echo("<br>\n<div align=\"left\" style=\"background-color: #EEEEEE; color:#000000\" class=\"TB\">\n");
    echo("<font color=\"red\" face=\"Arial, Sans-Serif\"><b>".$this->appname.": Database Error occured!</b></font><br>\n<br>\n<code>\n");
    echo('CODE: '.$errnum.'<br>');
    echo('DESC: '.$errstr.'<br>');
    echo('FILE: '.$filename.'<br>');
    if($this->showError == DBOF_SHOW_ALL_ERRORS)
      {
      if($ustr!='')
        {
        echo('INFO: '.$ustr.'<br>');
        }
      if($sqlerrpos)
        {
        $dummy = substr($sqltext,0,$sqlerrpos);
        $dummy.='<font color="red">'.substr($sqltext,$sqlerrpos).'</font>';
        $errquery = $dummy;
        }
      else
        {
        $errquery = $sqltext;
        }
      echo("&nbsp;SQL: ".$errquery."<br>");
      echo("&nbsp;POS: ".$sqlerrpos."<br>");
      echo("QCNT: ".$this->querycounter."<br>");
      if(count($this->errvars))
        {
        echo("VALS: ");
        for($i = 0; $i < count($this->errvars); $i++)
          {
          $errbuf.=sprintf("P%d='%s',",($i+1),$this->errvars[$i]);
          }
        $errbuf = substr($errbuf,0,strlen($errbuf)-1);
        echo($errbuf."<br>");
        }
      if(isset($var2dump))
        {
        echo("DUMP: <pre>");
        print_r($var2dump);
        echo("</pre>");
        }
      }
    echo("<br>\nPlease inform <a href=\"mailto:".$this->AdminEmail."\">".$this->AdminEmail."</a> about this problem.");
    echo("</code>\n");
    echo("</div>\n");
    echo("<div align=\"right\"><small>PHP V".phpversion()." / OCI8 Class v".$this->classversion."</small></div>\n");
    @error_log($this->appname.': Error in '.$filename.': '.$ustr.' ('.chop($errstr).')',0);
    if($exit_on_error) exit;
    }

  /**
   * Performs a single row query with Bindvar support.
   * Resflag can be OCI_NUM or OCI_ASSOC depending on what kind of array you want to be returned.
   * Remember to pass all required variables for all defined bind vars after
   * the $no_exit parameter, else you will recieve errors because of wrong parameter count!
   * @param string $querystring The query to be executed against the RDBMS
   * @param integer $resflag OCI_NUM for numeric array or OCI_ASSOC (default) for associative array result
   * @param integer $no_exit 1 => Function returns errorcode instead of calling Print_Error() or 0 => Will always call Print_Error()
   * @return array The result of the query as either associative or numeric array.
   * In case of an error can be also an assoc. array of error informations.
   */
  function Query($querystring, $resflag = OCI_ASSOC, $no_exit = 0)
    {
    $querystring        = ltrim($querystring);    // Leading spaces seems to be a problem??
    $resarr             = array();
    $this->errvars      = array();
    $funcargs           = @func_num_args();
    $this->sqlerr       = $querystring;
    $this->AffectedRows = 0;

    $this->checkSock();
    if($querystring == '')
      {
      return($this->Print_Error('Query(): No querystring was supplied!'));
      }
    if($funcargs > 3)
      {
      $this->errvars = array_slice(func_get_args(),3);
      $res = $this->GetBindVars($querystring);
      if(($funcargs-3) != count($res))
        {
        return($this->Print_Error("Query(): Parameter count does not match bind var count in query! (Defined: ".count($res)." - Supplied: ".($funcargs).")",$res));
        exit;
        }
      }
    if($this->debug)
      {
      $this->PrintDebug($querystring);
      }
    $this->stmt = @OCIParse($this->sock,$querystring);
    if(!$this->stmt)
      {
      return($this->Print_Error('Query(): Parse failed!'));
      exit;
      }
    if($funcargs > 3)
      {
      for($i = 3; $i < $funcargs; $i++)
        {
        $arg[$i] = @func_get_arg($i);
        @OCIBindByName($this->stmt,$res[$i-3],$arg[$i],-1);
        }
      }
    if(!@OCIExecute($this->stmt,OCI_DEFAULT))
      {
      if($no_exit)
        {
        $err = @OCIError($this->stmt);
        $this->sqlerrmsg = $err['message'];
        return($err['code']);
        }
      else
        {
        return($this->Print_Error('Query(): Execute failed!'));
        exit;
        }
      }
    $this->querycounter++;
    if(StriStr(substr($querystring,0,6),"SELECT"))
      {
      @OCIFetchInto($this->stmt,$resarr,$resflag+OCI_RETURN_NULLS+OCI_RETURN_LOBS);
      }
    else
      {
      $res = 0;
      }
    $this->AffectedRows = @OCIRowCount($this->stmt);
    @OCIFreeStatement($this->stmt);
    $this->stmt = 0;
    $this->errvars = array();
    return($resarr);
    }

  /**
   * Performs a multirow-query and returns result handle.
   * Required if you want to fetch many data rows. Does not return in case
   * of error, so no further checking is required.
   * Supports also binding, see Query() for further details.
   * @param string $querystring SQL-Statement to be executed
   * @return mixed Returns the statement handle or an error array in case of an error.
   * @see Query
   * @see FetchResult
   * @see FreeResult
   */
  function QueryResult($querystring)
    {
    $querystring        = ltrim($querystring);    // Leading spaces seems to be a problem??
    $funcargs           = @func_num_args();
    $this->sqlerr       = $querystring;
    $this->errvars      = array();
    $this->AffectedRows = 0;

    $this->checkSock();
    if($querystring == "")
      {
      return($this->Print_Error('QueryResult(): No querystring was supplied!'));
      }
    if($funcargs > 1)
      {
      $this->errvars = array_slice(func_get_args(),1);
      $res = $this->GetBindVars($querystring);
      if(($funcargs-1) != count($res))
        {
        return($this->Print_Error("QueryResult(): Parameter count does not match bind var count in query! (Defined:".count($res)." - Supplied: ".($funcargs).")",$res));
        }
      }
    if($this->debug)
      {
      $this->PrintDebug($querystring);
      }
    $this->stmt = @OCIParse($this->sock,$querystring);
    if(!$this->stmt)
      {
      return($this->Print_Error('QueryResult(): Parse failed!'));
      }

    // Check if user wishes to set a default prefetching value:

    if(defined('DB_DEFAULT_PREFETCH'))
      {
      $this->setPrefetch(DB_DEFAULT_PREFETCH);
      }

    // If we have any of the bind vars given, bind them NOW:

    if($funcargs > 1)
      {
      for($i = 1; $i < $funcargs; $i++)
        {
        $arg[$i] = @func_get_arg($i);
        @OCIBindByName($this->stmt,$res[$i-1],$arg[$i],-1);
        }
      }
    if(!@OCIExecute($this->stmt,OCI_DEFAULT))
      {
      return($this->Print_Error('QueryResult(): Execute failed!'));
      }
    $this->querycounter++;
    $this->sqlcache[$this->sqlcount][DBOF_CACHE_QUERY]     = $querystring;
    $this->sqlcache[$this->sqlcount][DBOF_CACHE_STATEMENT] = $this->stmt;
    $this->sqlcount++;
    return($this->stmt);
    }

  /**
   * Fetches a datarow.
   * Returns either numeric (OCI_NUM) or associative (OCI_ASSOC) array
   * for one data row as pointed to by either internal or passed result var.
   * @param integer $resflag OCI_ASSOC => Return associative array or OCI_NUM => Return numeric array
   * @param mixed $extstmt If != -1 then we try to fetch from that passed handle, else the class uses
   * internal saved handle. Useful if you want to perform a lot of different queries.
   * @return array The fetched datarow or NULL if no more data exist.
   */
  function FetchResult($resflag = OCI_ASSOC,$extstmt = -1)
    {
    if($extstmt == -1)
      {
      $mystate = $this->stmt;
      }
    else
      {
      $mystate = $extstmt;
      }
    @OCIFetchInto($mystate, $res, $resflag+OCI_RETURN_NULLS+OCI_RETURN_LOBS);
    return($res);
    }

  /**
   * Frees result obtained by QueryResult().
   * You may optionally pass external Result handles, if you omit this parameter
   * the internal handle is freed. This function also checks the built-in statement
   * cache for the handle and removes it from cache, too.
   * @param mixed $extstmt Optional your external saved handle to be freed.
   * @return mixed The result of OCIFreeStatement() is returned.
   * @see SearchQueryCache
   * @see RemoveFromQueryCache
   * @see OCI_Free_Statement
   */
  function FreeResult($extstmt = -1)
    {
    if($extstmt == -1)
      {
      $mystate = $this->stmt;
      }
    else
      {
      $mystate = $extstmt;
      $fq = $this->SearchQueryCache($extstmt);
      if($fq != -1)
        {
        $this->RemoveFromQueryCache($fq);
        }
      }

    $this->errvars = array();
    $this->no_exit = 0;
    if($mystate)
      {
      $this->AffectedRows = @OCIRowCount($mystate);
      return(@OCIFreeStatement($mystate));
      }
    }

  /**
   * Returns Oracle Server Version.
   * Opens an own connection if no active one exists.
   * @return string The Oracle Release Version string
   */

  function Version()
    {
    $weopen = 0;
    if(!$this->sock)
      {
      $this->Connect();
      $weopen = 1;
      }
    if($this->debug)
      {
      $this->PrintDebug('Version() called - Self-Connect: '.$weopen);
      }
    $ver = @OCIServerVersion($this->sock);
    $ret = explode("-",$ver);
    if($weopen) $this->Disconnect();
    $this->querycounter++;
    return(trim($ret[0]));
    }

  /**
   * Returns amount of queries executed by this class
   * @return integer How many queries are executed currently by this class.
   */
  function GetQueryCount()
    {
    if($this->debug)
      {
      $this->PrintDebug('GetQueryCount() called');
      }
    return(intval($this->querycounter));
    }

  /**
   * Commits current transaction.
   * @return integer The value of OCICommit() is returned.
   * @see oci_commit
   */
  function Commit()
    {
    $this->checkSock();
    if($this->debug)
      {
      $this->PrintDebug('COMMIT called');
      }
    return(@OCICommit($this->sock));
    }

  /**
   * Rollback current transaction.
   * @return integer The value of OCIRollback() is returned.
   * @see oci_rollback
   */
  function Rollback()
    {
    $this->checkSock();
    if($this->debug)
      {
      $this->PrintDebug('ROLLBACK called');
      }
    return(@OCIRollback($this->sock));
    }

  /**
   * Function extracts all bind vars out of given query.
   * To avoid wrong determined bind vars this function first kills out all TO_*() functions
   * together with their (possible) format strings which results in a query
   * containing only valid bind vars, format tags or other similar constructed
   * tags are removed.
   * @param string $query The query to check for bind vars.
   * @return array Returns an array with all found bind vars in the order they are defined inside the query.
   */
  function GetBindVars($query)
    {
    $pattern = array("/(TO_.*?\()(.*?)(,)(.*?\))/is","/(TO_.*?\('.*?'\))/is","/(TO_.*?\()(.*?\))/is");
    $replace = array("$2","","$2");
    $mydummy = $query;    // Make copy of current SQL

    $mydummy = @preg_replace($pattern,$replace,$mydummy);
    @preg_match_all('/[,|\W]?(:\w+)[,|\W]?/i',$mydummy,$res);
    return($res[1]);
    }

  /**
   * Function allows debugging of SQL Queries.
   * $state can have these values:
   * - DBOF_DEBUGOFF    = Turn off debugging
   * - DBOF_DEBUGSCREEN = Turn on debugging on screen (every Query will be dumped on screen)
   * - DBOF_DEBUFILE    = Turn on debugging on PHP errorlog
   * You can mix the debug levels by adding the according defines!
   * @param integer $state The DEBUG level to set
   */
  function SetDebug($state)
    {
    $this->debug = $state;
    }

  /**
   * Handles debug output according to internal debug flag.
   * @param string $msg The string to be send out to selected output.
   */
  function PrintDebug($msg)
    {
    if(!$this->debug) return;
    $errbuf = "";
    if($this->errvars)
      {
      $errbuf = "<br>VARS: ";
      for($i = 0; $i < count($this->errvars); $i++)
        {
        $errbuf.=sprintf("P%d='%s',",($i+1),$this->errvars[$i]);
        }
      $errbuf = substr($errbuf,0,strlen($errbuf)-1);
      $errbuf.="<br>";
      }
    if($this->debug & DBOF_DEBUGSCREEN)
      {
      printf("<div align=\"left\" style=\"background-color:#ffffff; color:#000000\"><pre>DEBUG: %s%s</pre></div>\n",$msg,$errbuf);
      }
    if($this->debug & DBOF_DEBUGFILE)
      {
      @error_log('DEBUG: '.$msg,0);
      if($errbuf!="")
        {
        @error_log('DEBUG: '.strip_tags($errbuf),0);
        }
      }
    }

  /**
   * Allows to en- or disable the SQL_TRACE feature of Oracle.
   * Pass TRUE to enable or FALSE to disable. When enabled all Statements of your
   * session are saved in a tracefile stored in
   * $ORACLE_BASE/admin/<DBNAME>/udump/*.trc
   * After your session disconnects use the tkprof tool to generate
   * Human-readable output from the tracefile, i.e.:
   * $> tkprof oracle_ora_7527.trc out.txt
   * Now read 'out.txt' and see what happen in Oracle!
   */
  function SQLDebug($state)
    {
    switch($state)
      {
      case  TRUE:   $sdebug = 'TRUE';
                    break;
      case  FALSE:  $sdebug = 'FALSE';
                    break;
      default:      return;
      }
    if($this->sock)
      {
      $this->Query('ALTER SESSION SET SQL_TRACE = '.$sdebug);
      }
    }

  /**
   * Returns version of this class.
   * @return string The version string in format "major.minor"
   */
  function GetClassVersion()
    {
    return($this->classversion);
    }

  /**
   * Describes a table by returning an array with all table info.
   * @param string $tablename Name of table you want to describe.
   * @return array A 2-dimensional array with table informations.
   */
  function DescTable($tablename)
    {
    $retarr = array();
    $weopen = 0;
    if(!$this->sock)
      {
      $this->Connect();
      $weopen = 1;
      }
    if($this->debug)
      {
      $this->PrintDebug('DescTable('.$tablename.') called - Self-Connect: '.$weopen);
      }
    $stmt = @OCIParse($this->sock,"SELECT * FROM ".$tablename." WHERE ROWNUM < 1");
    @OCIExecute($stmt);
    $this->querycounter++;
    $ncols = @OCINumCols($stmt);
    for ($i = 1; $i <= $ncols; $i++)
      {
      $retarr[$i-1][DBOF_COLNAME] = @OCIColumnName($stmt, $i);
      $retarr[$i-1][DBOF_COLTYPE] = @OCIColumnType($stmt, $i);
      $retarr[$i-1][DBOF_COLSIZE] = @OCIColumnSize($stmt, $i);
      $retarr[$i-1][DBOF_COLPREC] = @OCIColumnPrecision($stmt,$i);
      }
    @OCIFreeStatement($stmt);
    if($weopen) $this->Disconnect();
    return($retarr);
    }

  /**
   * Preparses a query but do not execute it (yet).
   * This allows to use a compiled query inside loops without having to parse it everytime
   * V0.38: All prepared() queries will be put into our own QueryCache() so
   * we can use the Prepare()/Execute() pair for more than one query at once.
   */
  function Prepare($querystring, $no_exit = 0)
    {
    $querystring    = ltrim($querystring);    // Leading spaces seems to be a problem??
    $this->no_exit  = $no_exit;
    $this->sqlerr   = $querystring;

    $this->checkSock();
    $stmt = @OCIParse($this->sock,$querystring);
    if(!$stmt)
      {
      if($no_exit)
        {
        $err = @OCIError($this->sock);
        $this->sqlerrmsg = $err['message'];
        return($err['code']);
        }
      else
        {
        return($this->Print_Error('Prepare(): Parse failed!'));
        }
      }
    if($this->debug)
      {
      $this->PrintDebug("PREPARE: #".$this->sqlcount." ".$this->sqlerr);
      }
    $this->sqlcache[$this->sqlcount][DBOF_CACHE_QUERY]     = $querystring;
    $this->sqlcache[$this->sqlcount][DBOF_CACHE_STATEMENT] = $stmt;
    $this->sqlcount++;
    return($stmt);
    }

  /**
   * Executes a prepare()d statement and returns the result.
   * You may then Fetch rows with FetchResult() or call FreeResult() to free your allocated result.
   * V0.38: Execute() searches first our QueryCache before executing, this
   * way we can use almost unlimited Queries at once in the Prepare/Execute pair
   * @param mixed $stmt The statement handle to be executed.
   * @return mixed Returns result set read for FetchResult() usage or an error state depending on class setting in case of an error.
   */
  function Execute($stmt)
    {
    $f = $this->SearchQueryCache($stmt);
    if($f == -1)
      {
      return($this->Print_Error("Cannot find query for given statement #".$stmt." inside query cache!!!"));
      }
    $this->sqlerr  = $this->sqlcache[$f][DBOF_CACHE_QUERY];
    $this->errvars = array();
    $funcargs = @func_num_args();
    if($funcargs > 1)
      {
      $this->errvars = @array_slice(@func_get_args(),1);
      $res = $this->GetBindVars($this->sqlcache[$f][DBOF_CACHE_QUERY]);
      if(($funcargs-1) != count($res))
        {
        $this->stmt = $stmt;
        return($this->Print_Error("Execute(): Parameter count does not match bind var count in query! (Defined:".count($res)." - Supplied: ".($funcargs).")",$res));
        }
      }
    if($funcargs > 1)
      {
      for($i = 1; $i < $funcargs; $i++)
        {
        $arg[$i] = @func_get_arg($i);
        @OCIBindByName($stmt,$res[$i-1],$arg[$i],-1);
        }
      }
    if($this->debug)
      {
      $this->PrintDebug($this->sqlerr);
      }
    if(!@OCIExecute($stmt,OCI_DEFAULT))
      {
      if($this->no_exit)
        {
        $err = @OCIError($stmt);
        $this->sqlerrmsg = $err['message'];
        return($err['code']);
        }
      else
        {
        $this->stmt = $stmt;
        return($this->Print_Error('Execute(): Execute failed!'));
        }
      }
    $this->querycounter++;
    return($stmt);
    }

  /**
   * Searches internal query cache for given statement id (V0.38+).
   * Returns index of found statement id or -1 to indicate an error.
   * This function is considered private and should NOT (!) be called from outside this class!
   * @param mixed $stmt The statement handle to search for
   * @return integer The index number of the found statement or -1 if no handle could be found.
   */
  function SearchQueryCache($stmt)
    {
    $f = 0;
    for($i = 0; $i < $this->sqlcount; $i++)
      {
      if($this->sqlcache[$i][DBOF_CACHE_STATEMENT] == $stmt)
        {
        return($i);
        }
      }
    return(-1);
    }

  /**
   * Removes query from cache (V0.38+).
   * Tries to remove a query from cache that was found by a previous call
   * to SearchQueryCache().
   * @param integer $nr Number of statement handle to be removed from cache.
   */
  function RemoveFromQueryCache($nr)
    {
    $newdata = array();
    $lv = 0;
    for($i = 0; $i < $this->sqlcount; $i++)
      {
      if($i != $nr)
        {
        $newdata[$lv][DBOF_CACHE_QUERY]    = $this->sqlcache[$i][DBOF_CACHE_QUERY];
        $newdata[$lv][DBOF_CACHE_STATEMENT]= $this->sqlcache[$i][DBOF_CACHE_STATEMENT];
        $lv++;
        }
      }
    $this->sqlcache = $newdata;
    $this->sqlcount--;
    }

  /**
   * Checks if we are already connected to our database (v0.40+).
   * If not terminates by calling Print_Error().
   * @see Print_Error
   */
  function checkSock()
    {
    if(!$this->sock)
      {
      return($this->Print_Error("<b>!!! NOT CONNECTED TO AN ORACLE DATABASE !!!</b>"));
      }
    }

  /**
   * Allows to save a file to a binary object field (BLOB). (V0.41+)
   * @param string $file_to_save Full path and filename of file to save
   * @param string $blob_table Name of Table where the blobfield resides
   * @param string $blob_field Name of BLOB field
   * @param string $where_clause Criteria to get the right row (i.e. WHERE ROWID=ABCDEF12345)
   */
  function SaveBLOB($file_to_save, $blob_table, $blob_field, $where_clause)
    {
    $this->checkSock();
    if($where_clause == '')
      {
      return($this->Print_Error("SaveBLOB(): WHERE clause must be non-empty, else ALL rows would be updated!!!"));
      }
    $q1 = "UPDATE ".$blob_table." SET ".$blob_field."=EMPTY_BLOB() ".$where_clause." RETURNING ".$blob_field." INTO :oralob";
    $this->sqlerr = $q1;
    $lobptr = @OCINewDescriptor($this->sock, OCI_D_LOB);
    if(!($lobstmt = @OCIParse($this->sock,$q1)))
      {
      return($this->Print_Error("SaveBLOB(): Unable to parse query !!!"));
      }
    @OCIBindByName($lobstmt, ":oralob", $lobptr, -1, OCI_B_BLOB);
    if(!@OCIExecute($lobstmt, OCI_DEFAULT))
      {
      @OCIFreeStatement($lobstmt);
      @OCIFreeDesc($lobptr);
      return($this->Print_Error("SaveBLOB(): Unable to retrieve empty LOB locator !!!"));
      }
    if(!$lobptr->savefile($file_to_save))
      {
      $this->RollBack();
      @OCIFreeStatement($lobstmt);
      @OCIFreeDesc($lobptr);
      return($this->Print_Error("SaveBLOB(): Cannot save LOB data !!!"));
      }
    @OCIFreeDesc($lobptr);
    @OCIFreeStatement($lobstmt);
    $this->query_counter++;
    }

  /**
   * Returns current connection handle (V0.42+).
   * Returns either the internal connection socket or -1 if no active handle exists.
   * Useful if you want to work with OCI* functions in parallel to this class.
   * @return mixed Internal socket value
   */
  function GetConnectionHandle()
    {
    return($this->sock);
    }

  /**
   * Allows to set internal socket to external value. (V0.49+)
   */
  function SetConnectionHandle($extsock)
    {
    if(!$this->sock) $this->sock = $extsock;
    }

  /**
   * Executes a query with parameters passed as hash values. (V0.44+)
   * Also IN/OUT and RETURNING INTO <...> clauses are supported.
   * You have to use FetchResult()/FreeResult() after using this function.
   * @param string $query The Query to be executed.
   * @param array $inhash The Parameters as Hash-array.
   * @see FetchResult
   * @see FreeResult
   */
  function QueryResultHash($query,&$inhash)
    {
    $this->checkSock();
    $query        = ltrim($query);    // Leading spaces seems to be a problem??
    $this->sqlerr = $query;
    if(!($this->stmt = @OCIParse($this->sock,$query)))
      {
      return($this->Print_Error("QueryResultHash(): Unable to parse query !!!"));
      }
    if(is_array($inhash))
      {
      reset($inhash);
      while(list($key,$val) = each($inhash))
        {
        @OCIBindByName($this->stmt,$key,$inhash[$key],-1);
        }
      }
    if(!@OCIExecute($this->stmt,OCI_DEFAULT))
      {
      return($this->Print_Error("QueryResultHash(): Execute query failed!"));
      }
    $this->query_counter++;
    }

  /**
   * This function tries to get the description for a given error message.
   * Simply pass the $err['message'] field to this function, it tries to
   * extract the required informations and call $ORACLE_HOME/bin/oerr to
   * get the error description. If either the exterr or the internal sqlerrmsg
   * variables are empty this function returns: "No error found."
   */
  function GetErrorText($exterr = "")
    {
    if($exterr != "")
      {
      $checkem = $exterr;
      }
    else
      {
      $checkem = $this->sqlerrmsg;
      }
    if($checkem=="")
      {
      return("No error found as error text is empty!");
      }
    $dummy = explode(":",$checkem);   // Oracle stores errors as: XXX-YYYY: ZZZZZZZ
    if($dummy[0] == $checkem)
      {
      return("No valid error description found! (".$checkem.")");
      }
    $test   = str_replace("-"," ",$dummy[0]);
    $cmdstr = "NLS_LANG=AMERICAN_AMERICA.WE8ISO8859P1; \$ORACLE_HOME/bin/oerr ".$test;
    $data   = @exec($cmdstr,$retdata,$retcode);
    $dummy  = explode(",",$retdata[0]);     // Oracle stores: 01721, 00000, "..."
    return(trim(preg_replace("/\"/","",$dummy[2])));
    }

  /**
   * Returns count of affected rows.
   * Info is set in Query() and QueryResult() / FreeResult()
   * and should return the amount of rows affected by previous DML command
   * @return integer Number of affected rows of previous DML command
   */
  function AffectedRows()
    {
    return($this->AffectedRows);
    }

  /**
   * Allows to control if the class should dump out error informations or simply
   * return the error as associative array.
   */
  function setErrorDisplay($val)
    {
    $this->showError = $val;
    }

  /**
   * Returns hash with error informations from last query (v0.55+)
   */
  function getSQLError()
    {
    $ehash['err'] = $this->sqlerr;
    $ehash['msg'] = $this->sqlerrmsg;
    return($ehash);
    }

  /**
   * Allows to set the handling of errors (V0.57+).
   *
   * - DBOF_SHOW_NO_ERRORS    => Show no security-relevant informations
   * - DBOF_SHOW_ALL_ERRORS   => Show all errors (useful for develop)
   * - DBOF_RETURN_ALL_ERRORS => No error/autoexit, just return the mysql_error code.
   * @param integer $val The Error Handling mode you wish to use.
   */
  function setErrorHandling($val)
    {
    $this->showError = $val;
    }

  /**
   * Allows to set the prefetch value when returning results.
   * Default is 1 which may lead to performance problems when data is transmitted via WAN.
   * @param integer $rows Amount of rows to be used for prefetching.
   * @param mixed $extstmt Optionally your own statement handle. If you omit this parameter the internal statement handle is used.
   * @return bool Return value of OCISetPrefetch()
   * @see OCISetPrefetch()
   */

  function setPrefetch($rows,$extstmt=-1)
    {

    if($extstmt == -1)
      {
      $st = $this->stmt;
      }
    else
      {
      $st = $extstmt;
      }
    if($st < 0) return($st);
    return(@OCISetPrefetch($st,$rows));
    }

  /**
   * Performs a single row query with Bindvar support passed as associative hash (V0.62+)
   * Resflag can be OCI_NUM or OCI_ASSOC depending on what kind of array you want to be returned.
   * Remember to pass all required variables for all defined bind vars after
   * the $no_exit parameter as an assoc. array (Key = name of bindvar without ':', value = value to add),
   * @param string $querystring The query to be executed against the RDBMS
   * @param integer $resflag OCI_NUM for numeric array or OCI_ASSOC (default) for associative array result
   * @param integer $no_exit 1 => Function returns errorcode instead of calling Print_Error() or 0 => Will always call Print_Error()
   * @return array The result of the query as either associative or numeric array.
   * In case of an error can be also an assoc. array of error informations.
   */

  function QueryHash($querystring, $resflag = OCI_ASSOC, $no_exit = 0, $bindvarhash = NULL)
    {
    $querystring        = ltrim($querystring);    // Leading spaces seems to be a problem??
    $resarr             = array();
    $this->errvars      = array();
    $funcargs           = @func_num_args();
    $this->sqlerr       = $querystring;
    $this->AffectedRows = 0;

    $this->checkSock();
    if($querystring == '')
      {
      return($this->Print_Error('QueryHash(): No querystring was supplied!'));
      }
    if($this->debug)
      {
      $this->PrintDebug($querystring);
      }
    $this->stmt = @OCIParse($this->sock,$querystring);
    if(!$this->stmt)
      {
      return($this->Print_Error('QueryHash(): Parse failed!'));
      exit;
      }
    if(is_array($bindvarhash))
      {
      reset($bindvarhash);
      while(list($key,$val) = each($bindvarhash))
        {
        @OCIBindByName($this->stmt,$key,$bindvarhash[$key],-1);
        }
      }
    if(!@OCIExecute($this->stmt,OCI_DEFAULT))
      {
      if($no_exit)
        {
        $err = @OCIError($this->stmt);
        $this->sqlerrmsg = $err['message'];
        return($err['code']);
        }
      else
        {
        return($this->Print_Error('Query(): Execute failed!'));
        exit;
        }
      }
    $this->querycounter++;
    if(StriStr(substr($querystring,0,6),"SELECT"))
      {
      @OCIFetchInto($this->stmt,$resarr,$resflag+OCI_RETURN_NULLS+OCI_RETURN_LOBS);
      }
    else
      {
      $res = 0;
      }
    $this->AffectedRows = @OCIRowCount($this->stmt);
    @OCIFreeStatement($this->stmt);
    $this->stmt = 0;
    $this->errvars = array();
    return($resarr);
    }

  } // EOF
?>
